%%% splitNeuronPlots.m
%%% This function takes a '* split.csv', '* splitComm.csv', '* split em.csv', or '* splitComm em.csv'
%%% file and generates multple plots of the organization parameters over the segments in the file.
%%% For every parameter specified by the input stats, and for every animal group specified by
%%% the input groups, the function generates two plots. One is the average value of the param-
%%% eter over each segment for that group with error bars. The second plot is the parameter
%%% for each animal over each segment. The plots are saved with different suffixes added to the
%%% string in fileOut.
%%%
%%% Input Arguments
%%% statsFile  = the name of an output file generated by MTQuant 
%%% fileOut = the base name of the output plots. The names of the parameters and/or
%%%      the numbers of the groups are added to fileOut and the plots are saved as .BMP files.
%%% groups (optional) = a list of group numbers to compare. These are the values of the DirNum
%%%      column of the output file (see Section 4 of the MTQuant documentation
%%%      for more information). If groups is not inputted, or it is empty (i.e.
%%%      groups=[];), the function compares all groups.
%%% stats (optional) = list of columns in statsFile for which to calculate the correlation.
%%%      This can be a list of column numbers or a list of strings, where each
%%%      string is the column name (See Section 5.2 of MTQuant documentation
%%%      for complete list)
    
function splitNeuronPlots(splitStatsFile,fileOut,groups,stats)

if ~exist('fileOut','var') || isempty(fileOut)
    [folder,name,~] = fileparts(splitStatsFile);
    fileOut = [folder,'\',name,'_splitPlot_'];
end

T = readtable(splitStatsFile);
C = table2cell(T);

dirNumsAll = cell2mat(C(:,3));
uDirNums = unique(dirNumsAll);

[uFolderNames,~,~] = getFolderNamesFromTable(C(:,1),dirNumsAll);
varNames = T.Properties.VariableNames;

if ~exist('groups','var') || isempty(groups)
    groups = uDirNums;
end

if iscellstr(groups)
    dirsToCompare = find(ismember(uFolderNames,groups));
else
    dirsToCompare = groups;
end

if ~exist('stats','var') || isempty(stats)
    stats = strcat('S1_',{'Avg_Spacing','Std_Dev_Spacing','Avg_Coverage','Avg_Length'});
    statsToCompare = find(ismember(varNames,stats));
elseif iscellstr(stats)
    statsToCompare = find(ismember(varNames,stats));
else
    statsToCompare = stats;
end

for k = 1:length(statsToCompare)
    currStat = statsToCompare(k);
    for j = 1:length(dirsToCompare)
        currDir = dirsToCompare(j);

        currMatToPlot = cell2mat(C(ismember(dirNumsAll,currDir),currStat:6:end));
        
        meanStats = zeros(1,size(currMatToPlot,2));
        stdStats = zeros(1,size(currMatToPlot,2));
        h = figure(1);hold on;
        for i = 1:length(meanStats)
            currStatsToPlot = currMatToPlot(:,i);
            meanStats(i) = mean(currStatsToPlot (currStatsToPlot >0));
            stdStats(i) = std(currStatsToPlot (currStatsToPlot >0));
            plot([i i],[meanStats(i)-stdStats(i) meanStats(i)+stdStats(i)],'b.-');
        end
        plot(meanStats,'b-o');hold off;
        currVarName = varNames{currStat};
        title(['Group ',num2str(currDir),': ',currVarName(4:end)],'Interpreter','none');
        xlabel('Segment Number')
        xlim([0 i+1]);
        print(h,[fileOut,currVarName(4:end),'_Group_',num2str(currDir)],'-dbitmap');
        
        colors = rand(size(currMatToPlot,1),3);
        
        h = figure(2);hold on;
        for i = 1:size(currMatToPlot,1)
            currStatsToPlot = currMatToPlot(i,:);
            plot(currStatsToPlot(currStatsToPlot>0),'.-','color',colors(i,:));
        end
        title(['Group ',num2str(currDir),': ',currVarName(4:end),' (All Animals)'],'Interpreter','none');
        xlabel('Segment Number')
        xlim([0 size(currStatsToPlot,2)+1]);
        hold off;
        print(h,[fileOut,currVarName(4:end),'_Group_',num2str(currDir),'_All'],'-dbitmap');
             
        try
           close(1:2);
        catch err
        end
    end
end