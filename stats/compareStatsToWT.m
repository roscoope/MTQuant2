%%% compareStatsToWT.m
%%% This function calculates the two-sample t-test between every group of animals and wild-type.
%%%
%%% Input Arguments
%%% statsFile = the name of an output file generated by MTQuant.
%%% groups (optional) = a list of group numbers to compare. These are the values of the DirNum
%%%      column of the output file (see Section 4 of the MTQuant documentation
%%%      for more information). If groups is not inputted, or it is empty (i.e.
%%%      groups=[];), the function compares all groups.
%%% stats (optional) = list of columns in statsFile for which to calculate the cor-
%%%      relation. This can be a list of column numbers or a list of
%%%      strings, where each string is the column name (See Section 5.2
%%%      of MTQuant documentation for complete list). By default, stats =
%%%      {'Avg Spacing','Std Dev Spacing','Avg Coverage','Avg Length'};
%%% 
%%% Output Arguments
%%% allPs = cell array containing the p-values of two-way t-tests for each parameter
%%%      in stats. N is the number of animals in each group
%%% allHs = cell array containing the decision to reject the null hypothesis (1 for
%%%      p-value less than 0.05)
%%% allMeans = cell array containing the mean values of each parameter for each group
%%% allStds = cell array containing the standard deviation of each parameter for each group

function [allPs,allHs,allMeans,allStds] = compareStatsToWT(statsFile,groups,wtGroup,stats)

T = readtable(statsFile);
C = table2cell(T);

dirNums = cell2mat(C(:,3));
uDirNums = unique(dirNums);
dirCounts = hist(dirNums,uDirNums);

[uFolderNames,~,~] = getFolderNamesFromTable(C(:,1),dirNums);
varNames = T.Properties.VariableNames;

if ~exist('groups','var') || isempty(groups)
    groups = uFolderNames;
end

if iscellstr(groups)
    dirsToCompare = find(ismember(uFolderNames,groups));
else
    dirsToCompare = groups;
end

if ~exist('wtGroup','var') || isempty(wtGroup)
    wtGroup = find(strcmp(uFolderNames,'L4  wt'));
    if isempty(wtGroup)
        wtGroup = uDirNums(1)s;
    end
end

if ~exist('stats','var') || isempty(stats)
    stats = {'Avg_Spacing','Std_Dev_Spacing','Avg_Coverage','Avg_Length'};
    statsToCompare = find(ismember(varNames,stats));
elseif iscellstr(stats)
    statsToCompare = find(ismember(varNames,stats));
else
    statsToCompare = stats;
end

dirsToCompare(dirCounts(dirsToCompare)<4) = [];

numGroups = length(dirsToCompare);
numStats = length(statsToCompare);

allPs = cell(numGroups+1,numStats+2);
allHs = cell(numGroups+1,numStats+2);
allMeans = cell(numGroups+1,numStats+2);
allStds = cell(numGroups+1,numStats+2);

allPs(2:end,1) = uFolderNames(dirsToCompare);
allHs(2:end,1) = uFolderNames(dirsToCompare);
allMeans(2:end,1) = uFolderNames(dirsToCompare);
allStds(2:end,1) = uFolderNames(dirsToCompare);

allPs(1,2) = {'N'};
allHs(1,2) = {'N'};
allMeans(1,2) = {'N'};
allStds(1,2) = {'N'};

wtDirLocs = dirNums==wtGroup;

for k = 1:numStats
    statInd = statsToCompare(k);
    allPs(1,k+2) = varNames(statInd);
    allHs(1,k+2) = varNames(statInd);
    allMeans(1,k+2) = varNames(statInd);
    allStds(1,k+2) = varNames(statInd);
    for j = 1:numGroups
        dirToCompare = dirsToCompare(j);
        allPs(j+1,2) = {dirCounts(dirToCompare)};
        allHs(j+1,2) = {dirCounts(dirToCompare)};
        allMeans(j+1,2) = {dirCounts(dirToCompare)};
        allStds(j+1,2) = {dirCounts(dirToCompare)};
        if dirCounts(dirToCompare) < 4
            h = Inf;
            p = Inf;
            currMean = Inf;
            currStd = Inf;
        else
            dirLocs = dirNums==dirToCompare;
            currWtStats = cell2mat(C(wtDirLocs,statInd));
            currWtStats(~isfinite(currWtStats)) = [];
            currStats = cell2mat(C(dirLocs,statInd));
            currStats(~isfinite(currStats)) = [];
            [h,p] = ttest2(currWtStats,currStats);
            currMean = mean(currStats);
            currStd = std(currStats);
        end
        
        allPs(j+1,k+2) = {p};
        allHs(j+1,k+2) = {h};
        allMeans(j+1,k+2) = {currMean};
        allStds(j+1,k+2) = {currStd};
    end
end
